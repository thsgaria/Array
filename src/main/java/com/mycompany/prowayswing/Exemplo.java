/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.prowayswing;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author moc
 */
public class Exemplo extends javax.swing.JFrame {

    private int indiceLinhaSelecionada = -1;

    /**
     * Creates new form Exemplo
     */
    public Exemplo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelProduto = new javax.swing.JLabel();
        jTextFieldProduto = new javax.swing.JTextField();
        jButtonSalvar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProdutos = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jButtonEditar = new javax.swing.JButton();
        jButtonApagar = new javax.swing.JButton();
        jButtonExportar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabelProduto.setText("Produto");

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jTableProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProdutos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableProdutos);
        if (jTableProdutos.getColumnModel().getColumnCount() > 0) {
            jTableProdutos.getColumnModel().getColumn(0).setResizable(false);
        }

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButtonEditar.setText("Editar");
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jButtonApagar.setText("Apagar");
        jButtonApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApagarActionPerformed(evt);
            }
        });

        jButtonExportar.setText("Exportar");
        jButtonExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonSalvar)
                    .addComponent(jTextFieldProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelProduto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonApagar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonExportar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonEditar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonApagar)
                                        .addGap(48, 48, 48)
                                        .addComponent(jButtonExportar))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelProduto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSalvar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        // Obter o nome do produto que o usuário informou
        String nome = jTextFieldProduto.getText();
        // Verificar que o nome contém no mínimo 3
        if (nome.length() < 3){
            JOptionPane.showMessageDialog(
                    null, 
                    "Nome deve conter no mínimo 3 caracteres", 
                    "AVISO", 
                    JOptionPane.ERROR_MESSAGE);
            jTextFieldProduto.requestFocus();
            return;
        }
        // Verificar que o nome contém no mínimo 20
        if (nome.length() > 20){
            JOptionPane.showMessageDialog(
                    null, 
                    "Nome deve conter no máximo 20 caracteres", 
                    "AVISO", 
                    JOptionPane.ERROR_MESSAGE);
            jTextFieldProduto.requestFocus();
            return;
        }
        // Obter o modelo da tabela para adicionar o novo registro do produto
        DefaultTableModel modeloTabela = (DefaultTableModel) jTableProdutos.getModel();

        // Verificar se é modo cadastro
        if (indiceLinhaSelecionada == -1) {
            // Adicionar uma linha com os dados do produto
            modeloTabela.addRow(new Object[]{nome});
        } else {
            modeloTabela.setValueAt(nome, indiceLinhaSelecionada, 0);
            // Permitir o usuário cadastrar novamente
            indiceLinhaSelecionada = -1;
        }

        // Limpar o campo do nome do produto
        jTextFieldProduto.setText("");
        // Colocar o foco no campo do nome do produto
        jTextFieldProduto.requestFocus();
        // CRUD
        // Create
        // Read
        // Update
        // Delete
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButtonApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApagarActionPerformed
        // Obter o indice da linha selecionada
        int indiceLinhaSelecionada = jTableProdutos.getSelectedRow();
        // Verificar que não foi selecionado item
        if (indiceLinhaSelecionada == -1) {
            return; // Encerra a execução pois usuário n selecionou uma linha
        }
        // Obter o modelo da tabela
        DefaultTableModel modelo = (DefaultTableModel) jTableProdutos.getModel();
        // Obter o nome do produto da linha selecionada na coluna 0 que 
        // é a coluna do nome
        String nome = modelo.getValueAt(indiceLinhaSelecionada, 0).toString();
        // Pergunta se o usuário realmente deseja apagar o registro
        int opcaoEscolhida = JOptionPane.showConfirmDialog(
                this,
                "Deseja apagar o produto " + nome + "?",
                "Cuidado",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );
        // Verifica que o usuário escolheu o botão sim
        if (opcaoEscolhida == JOptionPane.YES_OPTION) {
            // Remove a linha selecionada
            modelo.removeRow(indiceLinhaSelecionada);
        }
    }//GEN-LAST:event_jButtonApagarActionPerformed

    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
        // Obter o indice da linha selecionada
        indiceLinhaSelecionada = jTableProdutos.getSelectedRow();
        // Verificar que não foi selecionado item
        if (indiceLinhaSelecionada == -1) {
            return; // Encerra a execução pois usuário n selecionou uma linha
        }
        // Obter o modelo da tabela
        DefaultTableModel modelo = (DefaultTableModel) jTableProdutos.getModel();
        // Obter o nome do produto da linha selecionada na coluna 0 que 
        // é a coluna do nome
        String nome = modelo.getValueAt(indiceLinhaSelecionada, 0).toString();
        // Preencher o campo do nome
        jTextFieldProduto.setText(nome);
    }//GEN-LAST:event_jButtonEditarActionPerformed

    private void jButtonExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportarActionPerformed
        try (Workbook planilha = new XSSFWorkbook()) {
            Sheet folha = planilha.createSheet("Produtos");

            Row linhaCabecalho = folha.createRow(0);
            linhaCabecalho.createCell(0).setCellValue("Nome");
            // Pegar o modelo da tabela
            DefaultTableModel modelo = (DefaultTableModel) jTableProdutos.getModel();
            // Percorrer cada uma das linhas da tabela
            for (var i = 0; i < modelo.getRowCount(); i++) {
                // Obter o nome do produto da linha iterada
                String nome = modelo.getValueAt(i, 0).toString();
                // Criar uma linha na planilha
                Row linha = folha.createRow(i + 1);
                // Criar uma célula definindo o nome do produto da linha iterada
                linha.createCell(0).setCellValue(nome);
            }
          
        var caminhoArquivo = obterCaminhoArquivo();

            FileOutputStream arquivoSaida = new FileOutputStream(caminhoArquivo.toFile());
            planilha.write(arquivoSaida);
            arquivoSaida.close();
            
            JOptionPane.showMessageDialog(
                    null, 
                    "Produtos exportados com sucesso para arquivo excel"
            );
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonExportarActionPerformed

    private Path obterCaminhoArquivo(){
        // Obter o caminho da pasta da área de trabalho do usuário
        var caminhoDesktop = Paths.get(
                System.getProperty("user.home"), "Desktop");
        // Obter o caminho do arquivo do excel que será importado
        var caminhoArquivo = caminhoDesktop.resolve("example.xlsx");
        return caminhoArquivo;
    }
    
    private void importarPlanilhaExcel() {
        var caminhoArquivo = obterCaminhoArquivo();
        // Verificar se o arquivo existe, caso contrário n deve realizar
        // a leitura do excel
        if (!Files.exists(caminhoArquivo)) {
            return;
        }
        // Fará a abertura do arquivo excel
        try (Workbook workbook = new XSSFWorkbook(new FileInputStream(
                caminhoArquivo.toFile()))) {
            // Obter a planilha de Produtos para importar para jTable
            var planhilha = workbook.getSheet("Produtos");
            // Obter o modelo da tabela(jTable)
            var modelo = (DefaultTableModel) jTableProdutos.getModel();
            // Percorrer cada uma das linhas da planilha
            for (var linha : planhilha) {
                // Obter a primeira célula da linha iterada
                var celula = linha.getCell(0);
                // Obter o texto da célula
                var textoCelula = celula.getStringCellValue();
                // Verificar se a linha é a linha do cabeçalho, pois
                // será ignorada
                if (textoCelula.equals("Nome")) {
                    continue;
                }
                // Criar uma linha na tabela(jTable) permitindo o usuário
                // continuar utilizando o sistema
                modelo.addRow(new Object[]{textoCelula});
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        importarPlanilhaExcel();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Exemplo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Exemplo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Exemplo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Exemplo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Exemplo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApagar;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonExportar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JLabel jLabelProduto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableProdutos;
    private javax.swing.JTextField jTextFieldProduto;
    // End of variables declaration//GEN-END:variables
}
